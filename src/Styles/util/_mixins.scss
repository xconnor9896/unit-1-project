// shortcut to center any block elements
@mixin center-auto {
    margin: {
        left: auto;
        right: auto;
    }
}

/* div {
    @include center-auto()
} */

// simple way to define a box
@mixin box($width, $height: $width) {
    width: $width;
    height: $height;
}

/* div {
    @include box(200px)
}
div {
    @include box(200px, 100px);
} */

@mixin cover-background {
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
}

/* div {
    background-image: url(https://i.redd.it/8kdbhjg3fza61.jpg);
    @include cover-background();
} */

// flexbox toolkit
@mixin flex-column {
    display: flex;
    flex-direction: column;
}

@mixin flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
}

@mixin flex-center-column {
    @include flex-center();
    flex-direction: column;
}

// used when *, *::after, *::before is used
@mixin pseudo($width: 100%, $height: 100%, $display: block, $pos: absolute, $content: "") {
    content: $content;
    display: $display;
    position: $pos;
    @include box($width, $height);
}

/* div {
    position: relative;
    width: 200px;
    height: 200px;
    &::after {
        @include pseudo(200px, 100px);
        background: linear-gradient($color1, $color2);
    }
} */

// things that will help with positioning
@mixin position($position, $args) {
    @each $pos in top right bottom left {
        $i: index($args, $pos);
        @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) {
            #{$pos}: nth($args, $i + 1);
        }
    }
    position: $position;
}

@mixin absolute($args: " ") {
    @include position(absolute, $args);
}

@mixin fixed($args: " ") {
    @include position(fixed, $args);
}

@mixin relative($args: " ") {
    @include position(relative, $args);
}

/* .menu li {
    @include absolute(top 100% left 0)
}
.sticky-bar {
    @include fixed (top 0 left 0);
}
.submenu {
    @include relative();
} */

// $mobile: 480px; THIS IS REDUNDANT, MOBILE FIRST = MOBILE IS DEFAULT!!!!!
$wide-phone: 480px;
$foldable: 560px;
$small-tablet: 640px;
$tablet: 768px;
$large: 1024px;
$desktop: 1280px;
$widescreen: 1440px;

@mixin tablet {
    @media only screen and (min-width: $tablet) {
        @content;
    }
}

@mixin large {
    @media only screen and (min-width: $tablet) {
        @content;
    }
}

@mixin desktop {
    @media only screen and (min-width: $tablet) {
        @content;
    }
}

/* div {
    font-size: 3rem;
    @include tablet() {
        font-size: 2rem;
    }
} */

@mixin fade($type) {
    @if type == "hide" {
        visibility: hidden;
        opacity: 0;
        transition: $transition; // might be goofy if loading variables first, if so use line below
        // transition: visibility 1s opacity 1s;
    } @else if type == "show" {
        visiblity: visible;
        opacity: 1;
        transition: $transition;
    }
}

// mixin for input-placeholder colors
@mixin input-placeholder {
    &.placeholder {
        @content;
    }
    &:-moz-placeholder {
        @content;
    }
    &::-moz-placeholder {
        @content;
    }
    &:-ms-input-placeholder {
        @content;
    }
    &::-webkit-input-placeholder {
        @content;
    }
}

/* div {
    @include input-placeholder() {
        color: red;
        // all items in the input-placeholder mixin will inherit the color red
    }
} */

@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {
    @font-face {
        font-family: quote($font-name);
        src: url($file-name + ".eot?#iefix") format("embedded-opentype"), url($file-name + ".woff") format("woff"),
            url($file-name + ".ttf") format("truetype"), url($file-name + ".svg") format("svg");
        font-weight: $weight;
        font-style: $style;
    }
}


/* @include font-face("MyFont", "./base/typography/myfont.ttf", $style: underline);
div {
    font-family: "MyFont";
} */

@mixin text-short {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// creating css triangles
@mixin css-triangle(
    $color,
    $direction,
    $size: 6px,
    $position: absolute,
    $round: false
) {
    @include pseudo($pos: $position);
    width: 0;
    height: 0;
    @if $round {
        border-radius: 3px;
    }
    @if $direction == down {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
        margin-top: 0 - round($size / 2.5);
    }
    @else if $direction == up {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
        margin-left: -$size;
    }
}

/* menu.li {
    @include css-triangle(red, right, 6px)
} */